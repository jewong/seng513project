var dbAccess = require('dbAccess'), 
	url = require('url'),
	querystring = require('querystring'),
	reputation = require('reputation'), 
	url = require('url');

var g_UserId = -1;
var g_UserVote; 
var thisIssueId;

var ViewIssue = exports.ViewIssue = function() {
};

/**
* Send the HTML page to the client
* @param response Response object to send the data
* @param issue Issue to display
*/
function displayPage(response, issue) {
	return function(error, users) {
		thisIssueId = issue['id'];
		var user = users[0];

		g_UserVote = -1; //Assume that the user hasn't voted initially

		//Check if the user has already voted
		var sqlAlreadyVoted = "SELECT * FROM votes WHERE user_id = " + g_UserId + " AND issue_id = " + issue['id'];

		dbAccess.runQuery(sqlAlreadyVoted, function(error, rows_vote) {
			if (error) throw error;
			if (rows_vote.length == 1) {
				g_UserVote = rows_vote[0]['vote'];
			}

			var sqlQuery = "SELECT content,user_id,created FROM comments WHERE issue_id=" + thisIssueId;
			dbAccess.runQuery(sqlQuery, function (error, rows) {
				if (error) throw error;

				var sqlQuery2 = "SELECT id,name FROM users";
				dbAccess.runQuery(sqlQuery2, function (error, rows2) {
					if (error) throw error;

					contentArray = []; 
					
					if (rows.length > 0) {
						var name = "";
						for (var i = rows.length - 1; i >= 0; i--) {
							for (var j = rows2.length - 1; j >= 0; j--) {
								if (rows2[j].id == rows[i].user_id) {
									name = rows2[j].name;
									break;
								}
							}
							var obj = {
								iCommentCreatorId : rows[i].user_id,
								iCommentCreatorName : name,
								iCommentCreatedTime : rows[i].created,
								iCommentContent : rows[i].content
							};
							contentArray.push(obj);
						}
					}
					variables = {
						found: true,
						quickTaskButtons_partial: 'views/layouts/partials/quickTaskButtons_partial.html',
						quickTaskButtons: {id: issue.id},
						title: issue.title,
						created: issue.created,
						user: user,
						user_id: user.id,
						user_name: user.name,
						status: issue.status,
						location: issue.location,
						description: issue.description,
						link: issue.link,
						issue_id: issue.id,
						userHasVoted: g_UserVote != -1,
						userLiked: g_UserVote == 0,
						comments: contentArray
					}
					response.render('views/viewIssue.html', variables);
				});
			});
		});
   };
}
 
ViewIssue.addcomments = function (req, res) {
	var requestString = "";

	if (g_UserId == -1) {
		res.statusCode = 302;
		res.setHeader('Location', '/signin');
		res.end();
	}
	else {
		req.on('data', function (chunk) {
			requestString = requestString + chunk;
		});
		req.on('end', function() {
			var decodedBody = querystring.parse(requestString);
			var sqlQuery = "INSERT INTO comments (id,user_id,issue_id,content) VALUES ("
			+ null + ",'"
			+ g_UserId + "','"
			+ thisIssueId + "','"
			+ decodedBody.comments
			+ "')";
			dbAccess.runQuery(sqlQuery, function (error, rows) {
				if(error) throw error;
				res.statusCode = 302;
				res.setHeader('Location', '/viewIssue?id=' + thisIssueId);
				res.end();
			});
			reputation.updateOnAddComment(thisIssueId, g_UserId, decodedBody.comments); 
		});
	}
}

/**
* Retrieve the user corresponding to the issue
* @param response Response object to send the data
*/
function findIssueCreator(response, issueId) {
	return function(error, rows) {
		if (error) throw error;
			var issue = rows[0];
		if(issue == undefined) {
			variables = { found: false, issue_id: issueId }
			response.render('views/viewIssue.html', variables);
		}
		else
			dbAccess.runQuery('SELECT * FROM users WHERE id=' + issue['user_id'], displayPage(response, issue));
		/*dbAccess.find('users', { conditions:['id="'+issue['user_id']+'"'] }, function(error, results) {
		if(error) throw error;
		else displayPage(response, results[0]);
		});*/
	};
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
ViewIssue.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);
	var issueId = parsedURL.query.id;
	
	request.getUser(function(error, user) {
		if (error) throw error;
		if (user) g_UserId = user.id;
		var sqlQuery = 'SELECT * FROM issues WHERE id=' + parsedURL.query.id;
		dbAccess.runQuery(sqlQuery, findIssueCreator(response, issueId));
	/*dbAccess.find('issues', {conditions:['id="'+issueId+'"']}, function(error, results) {
	if(error) throw error;
	else if(results[0] == undefined)
	{
	variables = { found: false, issue_id: issueId }
	response.render('views/viewIssue.html', variables);
	}
	else
	{
		findIssueCreator(results);
	}
	});*/
	});
};